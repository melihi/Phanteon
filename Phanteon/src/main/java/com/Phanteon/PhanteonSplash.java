/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.Phanteon;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import javax.swing.ImageIcon;
import com.Phanteon.Console.CommandExecution;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author aeruginosa
 */
public class PhanteonSplash extends javax.swing.JFrame {

    private final Logger logr = Logger.getLogger(PhanteonGraphical.class.getName());

    /**
     * Creates new form PhanteonSplash
     */
    public PhanteonSplash() {

        initComponents();
        ImageIcon test = new ImageIcon("imgs/splah3.jpg");
        //  
        jProgressBar1.setValue(20);

        jLabel1.setIcon(test);
        this.setLocationRelativeTo(null);
        Thread start = new Thread(new Runnable() {
            @Override
            public void run() {
                try {

                    CheckDependencies();
                    jProgressBar1.setValue(50);
                    Thread.currentThread().sleep(1000);
                    CheckNetwork();
                    jProgressBar1.setValue(100);

                    PhanteonGraphical starter = new PhanteonGraphical();
                    //starter.main(null);
                    starter.setVisible(true);
                    dispose();

                    // Thread.currentThread().join(100);
                } catch (Exception ex) {
                    logr.log(Level.SEVERE, "splash error", ex);
                }

            }
        });

        start.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        setFocusable(false);
        setFocusableWindowState(false);
        setType(java.awt.Window.Type.POPUP);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Nimbus Sans", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("deneme");
        jLabel1.setIconTextGap(1);
        jLabel1.setInheritsPopupMenu(false);
        jLabel1.setOpaque(true);
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jProgressBar1.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());

                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PhanteonSplash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PhanteonSplash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PhanteonSplash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PhanteonSplash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PhanteonSplash().setVisible(true);

            }
        });

    }

    public void ControlManager() {
        // CheckNetwork;

    }

    public boolean CheckNetwork() {
        try {
            URL url = new URL("http://www.google.com");
            URLConnection connection = url.openConnection();
            connection.connect();

            return true;

        } catch (MalformedURLException ex) {
            System.out.println("Internet is not connected");
            logr.log(Level.SEVERE, "CheckNetwork error", ex);
        } catch (IOException ex) {
            System.out.println("Internet is not connected");
            logr.log(Level.SEVERE, "CheckNetwork error", ex);
        }
        this.hide();

        final JOptionPane pane = new JOptionPane("Missing dependencies  .", JOptionPane.ERROR_MESSAGE);
        final JDialog d = pane.createDialog(null, "Phanteon Scan & Discovery");
        d.setLocation(10, 10);
        d.setVisible(true);

        return false;
    }

    public boolean CheckDependencies() {
        CommandExecution exec = new CommandExecution();
        String values = exec.commandExecutor("if [ -d \"lib\" ]; then echo \"yes\"; else echo \"no\"; fi; if [ -d \"imgs\" ]; then echo \"yes\"; else echo \"no\"; fi; if [ -d \"Libraries\" ]; then echo \"yes\"; else echo \"no\"; fi;");
        if (values.contains("no")) {
            this.hide();
            System.out.println(values);
            final JOptionPane pane = new JOptionPane("Missing dependencies  .", JOptionPane.ERROR_MESSAGE);
            final JDialog d = pane.createDialog(null, "Phanteon Scan & Discovery");
            d.setLocation(10, 10);
            d.setVisible(true);

            System.exit(1);

        }
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables
}
